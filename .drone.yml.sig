eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgcmVzdG9yZS1jYWNoZToKICAgIGltYWdlOiBkcmlsbHN0ZXIvZHJvbmUtdm9sdW1lLWNhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDoKICAgICAgLSAuL2NzZ28KICAgIHZvbHVtZXM6CiAgICAgIC0gL2hvbWUvZHJvbmUvY2FjaGU6L2NhY2hlCgogIGRvd25sb2FkX2dhbWU6CiAgICBpbWFnZTogZmF0aG9zdGluZy9zdGVhbWNtZDpsYXRlc3QKICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICAtIEFQUF9OQU1FPWNzZ28KICAgICAgLSBBUFBfSUQ9NzQwCiAgICBjb21tYW5kczoKICAgICAgLSAuL3N0ZWFtY21kLnNoICtsb2dpbiBhbm9ueW1vdXMgK2ZvcmNlX2luc3RhbGxfZGlyICQocHdkKS8ke0FQUF9OQU1FfSArYXBwX3VwZGF0ZSAke0FQUF9JRH0gdmFsaWRhdGUgK3F1aXQKCiAgcmVidWlsZC1jYWNoZToKICAgIGltYWdlOiBkcmlsbHN0ZXIvZHJvbmUtdm9sdW1lLWNhY2hlCiAgICByZWJ1aWxkOiB0cnVlCiAgICBtb3VudDoKICAgICAgLSAuL2NzZ28KICAgIHZvbHVtZXM6CiAgICAgIC0gL2hvbWUvZHJvbmUvY2FjaGU6L2NhY2hlCgogIHB1Ymxpc2g6CiAgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAgIHJlcG86IGZhdGhvc3RpbmcvY3NnbwogICAgdGFnczogWyBsYXRlc3QsICR7RFJPTkVfQlJBTkNIfSBdCiAgICBidWlsZF9hcmdzOgogICAgICAtIEFQUF9OQU1FPWNzZ28KICAgICAgLSBBUFBfSUQ9NzQwCiAgICB3aGVuOgogICAgICBldmVudDogdGFnCgogIG5vdGlmeToKICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrCiAgICB1c2VybmFtZTogRHJvbmUKICAgIHRlbXBsYXRlOiA-CiAgICAgIEJ1aWxkIDx7e2J1aWxkLmxpbmt9fXx7e3JlcG8ubmFtZX19I3t7dHJ1bmNhdGUgYnVpbGQuY29tbWl0IDd9fT4gKHt7YnVpbGQuYnJhbmNofX0pCiAgICAgIGJ5IHt7YnVpbGQuYXV0aG9yfX0KICAgICAgZmluaXNoZWQgd2l0aCBhICp7e2J1aWxkLnN0YXR1c319KiBzdGF0dXMKICAgIHdoZW46CiAgICAgIHN0YXR1czogWyBzdWNjZXNzLCBmYWlsdXJlIF0K.D7PMPtsIwDnUBf6Z0Fujkg39KkCAce1cKaLlSgSt5Oo